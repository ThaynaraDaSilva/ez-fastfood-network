name: "Terraform Pipeline"

on:
  push:
    branches:
      - main
      - feature/pipeline

env:
  TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
  TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #TF_CLI_ARGS: "-var-file=${{ github.workspace }}/terraform.tfvars"

jobs:
  # 1. VPC Module
  vpc:
    name: "VPC Module"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.6.0"

      - name: Terraform Init (VPC)
        working-directory: ./vpc
        run: terraform init

      - name: Terraform Plan (VPC)
        working-directory: ./vpc
        run: terraform plan -out=tfplan
        #run: terraform plan -var-file="../terraform.tfvars"

      - name: Terraform Apply (VPC)
        working-directory: ./vpc
        run: terraform apply -auto-approve tfplan

  # 2. Internet Gateway Module
  internet-gateway:
    name: "Internet Gateway Module"
    needs: vpc
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.6.0"

      - name: Terraform Init (IGW)
        working-directory: ./internet_gateway
        run: terraform init

      - name: Terraform Plan (IGW)
        working-directory: ./internet_gateway
        #run: terraform plan -var-file="../terraform.tfvars"
        run: terraform plan -out=tfplan

      - name: Terraform Apply (IGW)
        working-directory: ./internet_gateway
        run: terraform apply -auto-approve tfplan

  # 3. Security Group Module
  security-group:
    name: "Security Group Module"
    needs: vpc
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.6.0"

      - name: Terraform Init (SG)
        working-directory: ./security_group
        run: terraform init

      - name: Terraform Plan (SG)
        working-directory: ./security_group
        #run: terraform plan -var-file="../terraform.tfvars"
        run: terraform plan -out=tfplan

      - name: Terraform Apply (SG)
        working-directory: ./security_group
        run: terraform apply -auto-approve tfplan

  # 4. Final Outputs
  outputs:
    name: "Collect Outputs"
    needs: [vpc, internet-gateway, security-group]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.6.0"

      - name: Initialize Terraform
        run: terraform init

      - name: Terraform Output
        run: terraform output

  # 5. Cleanup Job in case of failure
  cleanup:
    name: "Terraform Destroy on Failure"
    if: failure()  # Executa apenas se algum job falhar
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.6.0"

      - name: Terraform Destroy VPC
        working-directory: ./vpc
        run: |
          terraform init
          terraform destroy -auto-approve

      - name: Terraform Destroy Internet Gateway
        working-directory: ./internet_gateway
        run: |
          terraform init
          terraform destroy -auto-approve

      - name: Terraform Destroy Security Group
        working-directory: ./security_group
        run: |
          terraform init
          terraform destroy -auto-approve